"""Configuration.
Fichier de mapping nécessaire pour la gestion des modèles, catégories, onglets et modèles/Catégories
Permet en fonction du nom de la table et du nom de l'attribut, d'obtenir le libellé, l'infobulle, le type pour l'interface  
"""

load_mapping_read_meta_template_categories  =  \
      {"tpl_id"         : {"label" : "identifiant",             "tooltip" : "tooltip identifiant",    "property" : [ "visible", "disabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "integer", "help" : ""},
       "tplcat_id"      : {"label" : "libelle tplcat_id",       "tooltip" : "tooltip tplcat_id",      "property" : [ "visible", "disabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",    "help" : ""},
       "shrcat_path"    : {"label" : "libelle shrcat_path",     "tooltip" : "tooltip shrcat_path",    "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : ""},
       "loccat_path"    : {"label" : "libelle loccat_path",     "tooltip" : "tooltip loccat_path",    "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : ""},         
       "label"          : {"label" : "libelle label",           "tooltip" : "tooltip label",          "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "OK", "format" : "text",   "help" : "Libellé de la catégorie."},              
       "description"    : {"label" : "libelle description",     "tooltip" : "tooltip description",    "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Description de la catégorie. Elle sera affichée sous la forme d’un texte d’aide dans le formulaire."},         
       "special"        : {"label" : "libelle special",         "tooltip" : "tooltip special",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Le cas échéant, mise en forme spécifique à appliquer au champ. Valeurs autorisées (type énuméré `z_plume.meta_datatype`) : `'url'`, `'email'`, et `'phone'`.\n\nPour les catégories communes, les modifications apportées à ce champ ne seront pas prises en compte."},          
       "datatype"       : {"label" : "libelle datatype",        "tooltip" : "tooltip datatype",       "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Type de valeur attendu pour la catégorie, parmi (type énuméré `z_plume.meta_data_type`) : `'xsd:string'`, `'xsd:integer'`, `'xsd:decimal'`, `'xsd:boolean'`, `'xsd:date'`, `'xsd:time'`, `'xsd:dateTime'`, `'xsd:duration'`, `'rdf:langString'` (chaîne de caractères avec une langue associée) et `'gsp:wktLiteral'` (géométrie au format textuel WKT). Cette information détermine notamment la nature des widgets utilisés par Plume pour afficher et éditer les valeurs, ainsi que les validateurs appliqués. \n\nPour les catégories communes, les modifications apportées sur ce champ ne seront pas prises en compte sauf s'il s'agit d'utiliser des dates avec heures (`'xsd:dateTime'`) à la place des dates simples (`'xsd:date'`) ou réciproquement. Si, pour une catégorie locale, aucune valeur n'est renseignée pour ce champ (ni dans `meta_categorie` ni dans `meta_template_categories`), le plugin considérera que la catégorie prend des valeurs de type `'xsd:string'`."},         
       "is_long_text"   : {"label" : "libelle is_long_text",    "tooltip" : "tooltip is_long_text",   "property" : [ "visible", "enabled" ], "type" : "QCheckBox", "dicListItems" : "", "id" : "", "format" : "boolean",  "help" : "True pour une catégorie appelant un texte de plusieurs lignes.\n\nCette information ne sera prise en compte que si le type de valeur (datatype) est 'xsd:string' ou 'rdf:langString'. Pour le type 'gsp:wktLiteral', elle vaut implicitement toujours True. Pour les autres types, notamment 'xsd:string' et 'rdf:langString', elle vaut implicitement toujours False (si tant est qu’elle ait encore un objet)."},         
       "rowspan"        : {"label" : "libelle rowspan",         "tooltip" : "tooltip rowspan",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "integer",  "help" : "Nombre de lignes occupées par le widget de saisie, s'il y a lieu de modifier le comportement par défaut de Plume.\n\nLa valeur ne sera considérée que si `is_long_text` vaut `True`."},          
       "placeholder"    : {"label" : "libelle placeholder",     "tooltip" : "tooltip placeholder",    "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Valeur fictive pré-affichée en tant qu’exemple dans le widget de saisie, s’il y a lieu."},         
       "input_mask"     : {"label" : "libelle input_mask",      "tooltip" : "tooltip input_mask",     "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Masque de saisie, s’il y a lieu. La syntaxe est décrite dans la documentation de l’API Qt for python.\n\nLa valeur sera ignorée si le widget utilisé pour la catégorie ne prend pas en charge ce mécanisme."},         
       "is_multiple"    : {"label" : "libelle is_multiple",     "tooltip" : "tooltip is_multiple",    "property" : [ "visible", "enabled" ], "type" : "QCheckBox", "dicListItems" : "", "id" : "", "format" : "boolean",  "help" : "True si la catégorie admet plusieurs valeurs.\n\nPour les catégories communes, les modifications apportées sur ce champ ne seront pas prises en compte."},         
       "unilang"        : {"label" : "libelle unilang",         "tooltip" : "tooltip unilang",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "`True` si la catégorie n'admet plusieurs valeurs que si elles sont dans des langues différentes (par exemple un jeu de données n'a en principe qu'un seul titre, mais il peut être traduit).\n\nPour les catégories communes, les modifications apportées sur ce champ ne seront pas prises en compte. `is_multiple` est ignoré quand `unilang` vaut `True`. Cette information n'est considérée que si `datatype` vaut `'rdf:langString'`."},          
       "is_mandatory"   : {"label" : "libelle is_mandatory",    "tooltip" : "tooltip is_mandatory",   "property" : [ "visible", "enabled" ], "type" : "QCheckBox", "dicListItems" : "", "id" : "", "format" : "boolean",  "help" : "`True` si une valeur doit obligatoirement être saisie pour cette catégorie. \n\n Modifier cette valeur permet de rendre obligatoire une catégorie commune optionnelle, mais pas l''inverse."},         
       "sources"        : {"label" : "libelle sources",         "tooltip" : "tooltip sources",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Pour une catégorie prenant ses valeurs dans un ou plusieurs thésaurus, liste des sources admises. \n\n Cette information n'est considérée que pour les catégories communes. Il n'est pas possible d'ajouter des sources ni de les retirer toutes - Plume reviendrait alors à la liste initiale -, mais ce champ permet de restreindre la liste à un ou plusieurs thésaurus jugés les mieux adaptés."},          
       "geo_tools"      : {"label" : "libelle geo_tools",       "tooltip" : "tooltip geo_tools",      "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Pour une catégorie prenant pour valeurs des géométries, liste des fonctionnalités d'aide à la saisie à proposer, parmi `'show'` (visualisation de la géométrie saisie), `'point'` (tracé manuel d'une géométrie ponctuelle), `'linestring'` (tracé manuel d'une géométrie linéaire), `'rectangle'`  (tracé manuel d'un rectangle), `'polygon'` (tracé manuel d'un polygone), `'circle'` (tracé manuel d'un cercle), `'bbox'` (calcul du rectangle d'emprise de la couche courante), `'centroid'` (calcul du centre du rectangle d'emprise de la couche courante). \n\n Cette information ne sera considérée que si le type (`datatype`) est `'gsp:wktLiteral'`. Pour retirer toutes les fonctionnalités proposées par défaut pour une catégorie commune, on saisira une liste vide, soit `ARRAY[]::z_plume.meta_geo_tool[]`."},         
       "compute"        : {"label" : "libelle compute",         "tooltip" : "tooltip compute",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "text",    "help" : "Liste des fonctionnalités de calcul à proposer, parmis, `'auto'` (déclenchement automatique lorsque la fiche de métadonnées est générée), `'manuel'` (déclenchement à la demande, lorsque l'utilisateur clique sur le bouton qui apparaîtra alors à côté du champ de saisie dans le formulaire). \n\n Cette information ne sera considérée que si une méthode de calcul est effectivement disponible pour la catégorie. Pour retirer toutes les fonctionnalités proposées par défaut pour une catégorie commune, on saisira une liste vide, soit `ARRAY[]::z_plume.meta_compute[]`."},              
       "template_order" : {"label" : "libelle template_order",  "tooltip" : "tooltip template_order", "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "integer",  "help" : "Ordre d'apparence de la catégorie dans le formulaire. Les plus petits numéros sont affichés en premier, il n'est pas nécessaire que les numéros se suivent. Dans le cas des catégories communes, qui ont une structure arborescente, il s'agit de l'ordre parmi les catégories de même niveau dans la branche."},         
       "is_read_only"   : {"label" : "libelle is_read_only",    "tooltip" : "tooltip is_read_only",   "property" : [ "visible", "enabled" ], "type" : "QCheckBox", "dicListItems" : "", "id" : "", "format" : "boolean",  "help" : "True si la catégorie est en lecture seule."},         
       "tab_id"         : {"label" : "tab id",                  "tooltip" : "tooltip tab id",         "property" : [ "visible", "enabled" ], "type" : "QComboBox", "dicListItems" : "tabs", "id" : "", "format" : "text", "help" : "Nom de l'onglet."},                                  
       "compute_params" : {"label" : "libelle compute_params",  "tooltip" : "tooltip compute_params", "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "jsonb",    "help" : "Paramètres optionnels attendus par la méthode de calcul, si opportun. À spécifier sous la forme d'un dictionnaire JSON dont les clés correspondent aux noms des paramètres et les valeurs sont les valeurs des paramètres. Cf. [Métadonnées calculées](./metadonnees_calculees.md) pour plus de détails. \n\n Cette information ne sera considérée que si une méthode de calcul est effectivement disponible pour la catégorie et qu''elle admet un ou plusieurs paramètres."}       
      } 

load_mapping_read_meta_templates  =  \
      {"tpl_id"         : {"label" : "identifiant",             "tooltip" : "tooltip identifiant",    "property" : [ "visible", "disabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "integer", "help" : ""},
       "tpl_label"      : {"label" : "libelle tpl_label",       "tooltip" : "tooltip tpl_label",      "property" : [ "visible", "enabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "OK", "format" : "text",   "help" : "Libellé du modèle."},
       "sql_filter"     : {"label" : "libelle sql_filter",      "tooltip" : "tooltip sql_filter",     "property" : [ "visible", "enabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "text",   "help" : "Les champs `sql_filter` et `md_conditions` servent à définir des conditions selon lesquelles le modèle sera appliqué automatiquement à la fiche de métadonnées considérée. Les remplir est bien évidemment optionnel.\n\n \
                                                                                                                                                                                                                                     - `sql_filter` est un filtre SQL, qui peut se référer au nom du schéma avec `$1` et/ou de la table / vue avec `$2`. Il est évalué côté serveur au moment de l'import des modèles par le plugin, par la fonction `z_plume.meta_execute_sql_filter(text, text, text)`.\n\n \
                                                                                                                                                                                                                                     Par exemple, le filtre suivant appliquera le modèle aux tables des schémas des blocs 'données référentielles' (préfixe `'r_'`) et 'données externes' (préfixe `'e_'`) de la nomenclature nationale :\n\n \
                                                                                                                                                                                                                                     '$1 ~ ANY(ARRAY[''^r_'', ''^e_'']'"},
       "md_conditions"  : {"label" : "libelle md_conditions",   "tooltip" : "tooltip md_conditions",  "property" : [ "visible", "enabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "jsonb",  "help" : "Condition à remplir pour que ce modèle soit appliqué par défaut à une fiche de métadonnées, sous la forme d''un filtre SQL.\n\nOn pourra utiliser $1 pour représenter le nom du schéma et $2 le nom de la table.\n\n\
                                                                                                                                                                                                                                     Par exemple :\n\n\
                                                                                                                                                                                                                                     - ''$1 ~ ANY(ARRAY[''''^r_'''', ''''^e_'''']'' appliquera le modèle aux tables des schémas des blocs 'données référentielles' (préfixe ''r_'') et 'données externes' (préfixe ''e_'') de la nomenclature nationale ;\n\n\
                                                                                                                                                                                                                                     - ''pg_has_role(''''g_admin'''', ''''USAGE'''')'' appliquera le modèle pour toutes les fiches de métadonnées dès lors que l''utilisateur est membre du rôle g_admin."},              
       "priority"       : {"label" : "libelle priority",        "tooltip" : "tooltip priority",       "property" : [ "visible", "enabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "integer","help" : "Niveau de priorité du modèle. Si un jeu de données remplit les conditions de plusieurs modèles, celui dont la priorité est la plus élevée sera retenu comme modèle par défaut."},         
       "comment"        : {"label" : "libelle comment",         "tooltip" : "tooltip comment",        "property" : [ "visible", "enabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "text",   "help" : "Commentaire libre."},          
       "enabled"        : {"label" : "libelle enabled",         "tooltip" : "tooltip enabled",        "property" : [ "visible", "enabled" ],  "type" : "QCheckBox", "dicListItems" : "", "id" : "",   "format" : "boolean","help" : "Booléen indiquant si le modèle est actif. Les modèles désactivés n''apparaîtront pas dans la liste de modèles du plugin QGIS, même si leurs conditions d''application automatique sont remplies."}         
      }
       
load_mapping_read_meta_categories  =  \
      {"path"           : {"label" : "identifiant",            "tooltip" : "tooltip path",           "property" : [ "visible", "disabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : ""},
       "origin"         : {"label" : "libelle origin",         "tooltip" : "tooltip origin",         "property" : [ "visible", "disabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "text",    "help" : ""},
       "label"          : {"label" : "libelle label",           "tooltip" : "tooltip label",          "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "OK", "format" : "text",   "help" : "Libellé de la catégorie."},              
       "description"    : {"label" : "libelle description",     "tooltip" : "tooltip description",    "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Description de la catégorie. Elle sera affichée sous la forme d’un texte d’aide dans le formulaire."},         
       "special"        : {"label" : "libelle special",         "tooltip" : "tooltip special",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Le cas échéant, mise en forme spécifique à appliquer au champ. Valeurs autorisées (type énuméré `z_plume.meta_datatype`) : `'url'`, `'email'`, et `'phone'`.\n\nPour les catégories communes, les modifications apportées à ce champ ne seront pas prises en compte."},          
       "is_node"        : {"label" : "libelle is_node",        "tooltip" : "tooltip is_node",        "property" : [ "visible", "disabled" ],  "type" : "QCheckBox", "dicListItems" : "", "id" : "",   "format" : "boolean", "help" : "True si la catégorie est le nom d''un groupe qui contiendra lui-même d''autres catégories et non une catégorie à laquelle sera directement associée une valeur. Par exemple, is_node vaut True pour la catégorie correspondant au point de contact (dcat:contactPoint) et False pour le nom du point de contact (dcat:contactPoint / vcard:fn). CE CHAMP EST GENERE AUTOMATIQUEMENT, NE PAS MODIFIER MANUELLEMENT."},              
       "datatype"       : {"label" : "libelle datatype",        "tooltip" : "tooltip datatype",       "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Type de valeur attendu pour la catégorie, parmi (type énuméré `z_plume.meta_data_type`) : `'xsd:string'`, `'xsd:integer'`, `'xsd:decimal'`, `'xsd:boolean'`, `'xsd:date'`, `'xsd:time'`, `'xsd:dateTime'`, `'xsd:duration'`, `'rdf:langString'` (chaîne de caractères avec une langue associée) et `'gsp:wktLiteral'` (géométrie au format textuel WKT). Cette information détermine notamment la nature des widgets utilisés par Plume pour afficher et éditer les valeurs, ainsi que les validateurs appliqués. \n\nPour les catégories communes, les modifications apportées sur ce champ ne seront pas prises en compte sauf s'il s'agit d'utiliser des dates avec heures (`'xsd:dateTime'`) à la place des dates simples (`'xsd:date'`) ou réciproquement. Si, pour une catégorie locale, aucune valeur n'est renseignée pour ce champ (ni dans `meta_categorie` ni dans `meta_template_categories`), le plugin considérera que la catégorie prend des valeurs de type `'xsd:string'`."},         
       "is_long_text"   : {"label" : "libelle is_long_text",    "tooltip" : "tooltip is_long_text",   "property" : [ "visible", "enabled" ], "type" : "QCheckBox", "dicListItems" : "", "id" : "", "format" : "boolean",  "help" : "True pour une catégorie appelant un texte de plusieurs lignes.\n\nCette information ne sera prise en compte que si le type de valeur (datatype) est 'xsd:string' ou 'rdf:langString'. Pour le type 'gsp:wktLiteral', elle vaut implicitement toujours True. Pour les autres types, notamment 'xsd:string' et 'rdf:langString', elle vaut implicitement toujours False (si tant est qu’elle ait encore un objet)."},         
       "rowspan"        : {"label" : "libelle rowspan",         "tooltip" : "tooltip rowspan",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "integer",  "help" : "Nombre de lignes occupées par le widget de saisie, s'il y a lieu de modifier le comportement par défaut de Plume.\n\nLa valeur ne sera considérée que si `is_long_text` vaut `True`."},          
       "placeholder"    : {"label" : "libelle placeholder",     "tooltip" : "tooltip placeholder",    "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Valeur fictive pré-affichée en tant qu’exemple dans le widget de saisie, s’il y a lieu."},         
       "input_mask"     : {"label" : "libelle input_mask",      "tooltip" : "tooltip input_mask",     "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Masque de saisie, s’il y a lieu. La syntaxe est décrite dans la documentation de l’API Qt for python.\n\nLa valeur sera ignorée si le widget utilisé pour la catégorie ne prend pas en charge ce mécanisme."},         
       "is_multiple"    : {"label" : "libelle is_multiple",     "tooltip" : "tooltip is_multiple",    "property" : [ "visible", "enabled" ], "type" : "QCheckBox", "dicListItems" : "", "id" : "", "format" : "boolean",  "help" : "True si la catégorie admet plusieurs valeurs.\n\nPour les catégories communes, les modifications apportées sur ce champ ne seront pas prises en compte."},         
       "unilang"        : {"label" : "libelle unilang",         "tooltip" : "tooltip unilang",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "`True` si la catégorie n'admet plusieurs valeurs que si elles sont dans des langues différentes (par exemple un jeu de données n'a en principe qu'un seul titre, mais il peut être traduit).\n\nPour les catégories communes, les modifications apportées sur ce champ ne seront pas prises en compte. `is_multiple` est ignoré quand `unilang` vaut `True`. Cette information n'est considérée que si `datatype` vaut `'rdf:langString'`."},          
       "is_mandatory"   : {"label" : "libelle is_mandatory",    "tooltip" : "tooltip is_mandatory",   "property" : [ "visible", "enabled" ], "type" : "QCheckBox", "dicListItems" : "", "id" : "", "format" : "boolean",  "help" : "`True` si une valeur doit obligatoirement être saisie pour cette catégorie. \n\n Modifier cette valeur permet de rendre obligatoire une catégorie commune optionnelle, mais pas l''inverse."},         
       "sources"        : {"label" : "libelle sources",         "tooltip" : "tooltip sources",        "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Pour une catégorie prenant ses valeurs dans un ou plusieurs thésaurus, liste des sources admises. \n\n Cette information n'est considérée que pour les catégories communes. Il n'est pas possible d'ajouter des sources ni de les retirer toutes - Plume reviendrait alors à la liste initiale -, mais ce champ permet de restreindre la liste à un ou plusieurs thésaurus jugés les mieux adaptés."},          
       "geo_tools"      : {"label" : "libelle geo_tools",       "tooltip" : "tooltip geo_tools",      "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "text",     "help" : "Pour une catégorie prenant pour valeurs des géométries, liste des fonctionnalités d'aide à la saisie à proposer, parmi `'show'` (visualisation de la géométrie saisie), `'point'` (tracé manuel d'une géométrie ponctuelle), `'linestring'` (tracé manuel d'une géométrie linéaire), `'rectangle'`  (tracé manuel d'un rectangle), `'polygon'` (tracé manuel d'un polygone), `'circle'` (tracé manuel d'un cercle), `'bbox'` (calcul du rectangle d'emprise de la couche courante), `'centroid'` (calcul du centre du rectangle d'emprise de la couche courante). \n\n Cette information ne sera considérée que si le type (`datatype`) est `'gsp:wktLiteral'`. Pour retirer toutes les fonctionnalités proposées par défaut pour une catégorie commune, on saisira une liste vide, soit `ARRAY[]::z_plume.meta_geo_tool[]`."},         
       "compute"        : {"label" : "libelle compute",        "tooltip" : "tooltip compute",        "property" : [ "visible", "enabled" ],  "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "text",    "help" : "Liste des fonctionnalités de calcul à proposer, parmis, `'auto'` (déclenchement automatique lorsque la fiche de métadonnées est générée), `'manuel'` (déclenchement à la demande, lorsque l'utilisateur clique sur le bouton qui apparaîtra alors à côté du champ de saisie dans le formulaire). \n\n Cette information ne sera considérée que si une méthode de calcul est effectivement disponible pour la catégorie. Pour retirer toutes les fonctionnalités proposées par défaut pour une catégorie commune, on saisira une liste vide, soit `ARRAY[]::z_plume.meta_compute[]`."},              
       "template_order" : {"label" : "libelle template_order",  "tooltip" : "tooltip template_order", "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "integer",  "help" : "Ordre d'apparence de la catégorie dans le formulaire. Les plus petits numéros sont affichés en premier, il n'est pas nécessaire que les numéros se suivent. Dans le cas des catégories communes, qui ont une structure arborescente, il s'agit de l'ordre parmi les catégories de même niveau dans la branche."},         
       "compute_params" : {"label" : "libelle compute_params",  "tooltip" : "tooltip compute_params", "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "", "format" : "jsonb",    "help" : "Paramètres optionnels attendus par la méthode de calcul, si opportun. À spécifier sous la forme d'un dictionnaire JSON dont les clés correspondent aux noms des paramètres et les valeurs sont les valeurs des paramètres. Cf. [Métadonnées calculées](./metadonnees_calculees.md) pour plus de détails. \n\n Cette information ne sera considérée que si une méthode de calcul est effectivement disponible pour la catégorie et qu''elle admet un ou plusieurs paramètres."}       
      }

load_mapping_read_meta_tabs  =  \
      {"tab_id"         : {"label" : "identifiant",             "tooltip" : "tooltip identifiant",   "property" : [ "visible", "disabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "integer", "help" : ""},
       "tab_label"      : {"label" : "libelle tab_label",       "tooltip" : "tooltip tab_label",     "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "OK", "format" : "text",     "help" : "Libellé de l'onglet."},
       "tab_num"        : {"label" : "libelle tab_num",         "tooltip" : "tooltip tab_num",       "property" : [ "visible", "enabled" ], "type" : "QLineEdit", "dicListItems" : "", "id" : "",   "format" : "integer",  "help" : "Position de l'onglet."}         
      }
